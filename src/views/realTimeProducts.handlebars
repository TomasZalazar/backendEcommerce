<div class="container">
    <!-- Perfil de usuario y botón de logout -->
    <h1>Perfil de usuario {{login_type}}</h1>
    <h2>Usuario: {{user.firstName}}, {{user.lastName}}</h2>
    <h3>Rol: {{user.role}}</h3>
    <form action="/api/auth/logout" method="get">
        <button type="submit" class="btn btn-success">Salir</button>
    </form>

    <!-- Listado de productos -->
    <h1 class="mt-4">Listado de productos</h1>
    <div class="row">
        {{#each products}}
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Nombre del producto: {{title}}</h6>
                    <p class="card-text">ID del producto: {{_id}}</p>
                    <p class="card-text">Precio del producto: {{price}}</p>
                    <p class="card-text">Descripción del producto: {{description}}</p>
                    <p class="card-text">Stock disponible: {{stock}}</p>
                    <p class="card-text">Categoría: {{category}}</p>
                    <button class="btn btn-primary add-to-cart" data-cartid="{{cartId}}" data-productid="{{_id}}">
                        Agregar al carrito
                    </button>
                </div>
            </div>
        </div>
        {{/each}}
    </div>

    <!-- Paginación -->
    <div id="pagination" class="mt-3">
        {{#if showPrev}}
        <a href="/realtimeproducts?page={{prevPage}}" class="btn btn-primary">Anterior</a>
        {{/if}}
        <span class="mx-2">Página {{currentPage}} de {{totalPages}}</span>
        {{#if showNext}}
        <a href="/realtimeproducts?page={{nextPage}}" class="btn btn-primary">Siguiente</a>
        {{/if}}
    </div>
</div>

<!-- Formulario para agregar un nuevo producto -->
<div class="container-">
    <div class="row">

        <div class="col-md-6">
            <h1>Agregar Producto</h1>
            <form id="formulario-producto" method="POST" enctype="multipart/form-data" action="/api/products/create"
                class="mt-3">
                <div class="mb-3">
                    <input type="text" id="nombre-producto" name="title" class="form-control"
                        placeholder="Título del Producto">
                </div>
                <div class="mb-3">
                    <input type="text" id="descripcion-producto" name="description" class="form-control"
                        placeholder="Descripción del Producto">
                </div>
                <div class="mb-3">
                    <input type="text" id="categoria-producto" name="category" class="form-control"
                        placeholder="Categoría del Producto">
                </div>
                <div class="mb-3">
                    <input type="number" id="precio-producto" name="price" class="form-control"
                        placeholder="Precio del Producto">
                </div>
                <div class="mb-3">
                    <input type="text" id="codigo-producto" name="code" class="form-control"
                        placeholder="Código del Producto">
                </div>
                <div class="mb-3">
                    <input type="number" id="stock-producto" name="stock" class="form-control"
                        placeholder="Stock del Producto">
                </div>
                <div class="mb-3">
                    <input type="file" id="thumbnails-producto" name="thumbnails" class="form-control" multiple>
                </div>
                <button id="agregar-producto-btn" class="btn btn-primary">Agregar Producto</button>
            </form>

        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
    integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
    crossorigin="anonymous"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const socketClient = io('ws://localhost:4000');
        const productsList = document.getElementById('productsList');
        const addToCartButtons = document.querySelectorAll('.add-to-cart');

        addToCartButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();

                const cartId = '{{user._cart_id._id}}';
                const productId = button.getAttribute('data-productid');
                if (!cartId || !productId) {
                    console.error('Cart ID o Product ID no encontrados');
                    return;
                }

                try {
                    const token = '{{authToken}}'; // Token de autenticación

                    const response = await fetch(`/api/cart/${cartId}/products/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({ qty: 1 }) // Enviar qty en el cuerpo de la solicitud
                    });

                    const result = await response.json();

                    if (response.ok) {
                        console.log('Producto agregado al carrito con éxito:', result);
                        Toastify({
                        text: "Producto agregado al carrito exitosamente",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "green",
                        }
                    }).showToast();
                        // Actualizar la UI si es necesario
                    } else {
                        console.error('Error al agregar producto al carrito:', result.error || response.statusText);
                        Toastify({
                        text: data.payload || "Error al agregar el producto al carrito",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "red",
                        }
                    }).showToast();
                    }
                } catch (error) {
                    console.error('Error al conectar con el servidor:', error.message);
                }
            });
        });



        document.getElementById('agregar-producto-btn').addEventListener('click', async (event) => {
            event.preventDefault();

            const nuevoProducto = {
                title: document.getElementById('nombre-producto').value,
                description: document.getElementById('descripcion-producto').value,
                category: document.getElementById('categoria-producto').value,
                price: document.getElementById('precio-producto').value,
                code: document.getElementById('codigo-producto').value,
                stock: document.getElementById('stock-producto').value,
            };

            // Verificar si faltan campos
            if (!nuevoProducto.title || !nuevoProducto.description || !nuevoProducto.category ||
                !nuevoProducto.price || !nuevoProducto.code || !nuevoProducto.stock) {
                console.error('Faltan campos requeridos');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('title', nuevoProducto.title);
                formData.append('description', nuevoProducto.description);
                formData.append('category', nuevoProducto.category);
                formData.append('price', nuevoProducto.price);
                formData.append('code', nuevoProducto.code);
                formData.append('stock', nuevoProducto.stock);

                const thumbnailsInput = document.getElementById('thumbnails-producto');
                for (const file of thumbnailsInput.files) {
                    formData.append('thumbnails', file);
                }
                console.log('form data:', formData)
                const token = '{{authToken}}'; // Token de autenticación pasado desde el backend

                const response = await fetch('/api/products/create', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        // No agregues 'Content-Type': 'application/json' aquí
                    },
                    body: formData // Aquí el formData contiene todo lo que necesitas
                });

                if (response.ok) {
                    document.getElementById('formulario-producto').reset();
                    const nuevoProducto = await response.json();
                    socketClient.emit('nuevoProducto', nuevoProducto);
                    alert('Producto agregado exitosamente!');
                } else {
                    const errorMessage = await response.json();
                    console.error('Error al agregar el producto:', errorMessage);
                    alert('Hubo un error al agregar el producto. Verifica los datos ingresados.');
                }
            } catch (error) {
                console.error('Error al agregar el producto:', error.message);
                alert('Ocurrió un error inesperado. Por favor, intenta de nuevo.');
            }
        });


        // Escuchar eventos del servidor Socket.IO para nuevos productos
        socketClient.on('nuevoProducto', data => {
            if (data && data.product) {
                const nuevoProducto = data.product;

                const nuevoItem = document.createElement('li');
                nuevoItem.textContent = `${nuevoProducto.title} ($${nuevoProducto.price})`;
                nuevoItem.classList.add('list-group-item');

                const deleteIcon = document.createElement('span');
                deleteIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M3 5V3h10v2H3z"/>
                        <path fill-rule="evenodd" d="M5.5 0a.5.5 0 0 1 .5.5V1h4V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v1H1V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 5v9a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V5H1zm12 9H3V6h10v8z"/>
                    </svg>`;
                deleteIcon.classList.add('delete-icon');
                deleteIcon.addEventListener('click', async () => {
                    try {
                        const response = await fetch(`/api/products/${nuevoProducto._id}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${authToken}`
                            }
                        });

                        if (response.ok) {
                            nuevoItem.remove();
                        } else {
                            console.error('Error al eliminar el producto');
                        }
                    } catch (error) {
                        console.error('Error al eliminar el producto:', error.message);
                    }
                });

                nuevoItem.appendChild(deleteIcon);
                productsList.appendChild(nuevoItem);
            }
        });
    });
</script>